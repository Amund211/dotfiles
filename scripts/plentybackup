#! /bin/sh

set -eu

version="1.2"
echo "Plentybackup version "$version

if [ "${1-}" = '-h' ] || [ "${1-}" = '--help' ]; then
	echo 'Usage:'
	echo '-h / --help	display this message'
	echo '-r / --remote	append "-remote" to the hardcoded backuphost'
	exit 0
fi


# Get local hostname
hostname=$(hostname)

# Hardcoded external factors
backuphost=miniplenty
# Keep backups separated by hostname
remotebackupdir="/backup/$hostname"

# Hardcoded internal factors
backupdirfile=~/.scripts/backupdirs
tmpbackupdir=/var/tmp/backup

filename=$hostname"_"$(date +'%FT%H%M%z').zip

if [ "${1-}" = '-r' ] || [ "${1-}" = '--remote' ]; then
	backuphost="$backuphost"-remote
fi

echo "Target directories:"
sed 's/^/\t/' $backupdirfile


echo "Zipping files to $tmpbackupdir/$filename"
# Create tmpdir
mkdir -p "$tmpbackupdir"
# Removing empty lines and lines starting with a # (comments)
sed '/^\(#.*\)\{0,1\}$/d' $backupdirfile |
	zip -r "$tmpbackupdir/$filename" -@ -x '**/venv/*' 1> /dev/null
echo "Completed zipping. Size of backup: $(du -h "$tmpbackupdir/$filename" | awk '{print $1}')"


echo "Mounting backupdrive on $backuphost"
# if ssh $backuphost :; then
if ssh $backuphost mountbackup; then
	echo "Mount successful"
else
	# Error in mount
	echo "Could not mount backupdrive" >&2
	exit 1
fi


echo "Transferring backup"
if scp "$tmpbackupdir/$filename" "$backuphost:$remotebackupdir/" 1> /dev/null; then
	echo "Transfer complete"
else
	echo "Transfer failed" >&2
fi


echo "Unmounting backupdrive"
# if ssh $backuphost :; then
if ssh $backuphost umountbackup; then
	# Successfully mounted and unmounted drive
	echo "Unmount successful"
else
	echo "Could not unmount backupdrive" >&2
	exit 1
fi

# Prompt to clear out $tmpbackupdir if size is > ~1Gb
if [ "$(du -s --bytes "$tmpbackupdir" | awk '{print $1}')" -gt 1000000000 ];
then
	echo "$tmpbackupdir is currently taking up $(du -h "$tmpbackupdir" | awk '{print $1}'). Consider cleaning it out."
fi
